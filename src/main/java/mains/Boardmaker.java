package mains;

import other.myImage;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JPanel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author blake
 */
public class Boardmaker extends javax.swing.JFrame {
    public int blockSize;
    public Boolean[][] bools;
    public Rectangle[][] spaces;
    public JPanel panel;
    public String saveloc;
    /**
     * Creates new form Boardmaker
     */
    public Boardmaker() {
       
        
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        blockSize = 10;
        size = Toolkit.getDefaultToolkit().getScreenSize();
        double xSize = size.getWidth();
        double ySize = size.getHeight();
        int horizontalSpaces = (int) xSize / blockSize;
        int verticalSpaces = (int) ySize / blockSize;
        spaces = new Rectangle[horizontalSpaces][verticalSpaces];
        bools = new Boolean[horizontalSpaces][verticalSpaces];
        
        // Initialize all booleans in the array as false
        for (int i = 0; i < bools.length; i++) {
                for (int j = 0; j < bools[i].length; j++) {
                    bools[i][j] = false;
                }
            }
        
        // Initialize all of the rectangles
        for (int i = 0; i < spaces.length; i++) {
            for (int j = 0; j < spaces[i].length; j++) {
                spaces[i][j] = new Rectangle(i * blockSize, j * blockSize, blockSize, blockSize);
            }
        }
        
        panel = new myPanel2();
        panel.setVisible(true);
        this.setSize(size);
        this.show(); 
        initComponents();
        image = new myImage("epcotimage.jpg");
        //image.smoothColors();
        saveloc = "akingdom.txt";
        load();
    }
    myImage image;
    
    /**/
    public void save() {
        
        try {
            FileWriter writer = new FileWriter(saveloc);
            for (int i = 0; i < spaces.length; i++) {
            for (int j = 0; j < spaces[i].length; j++) {
                if (bools[i][j]) {
                    writer.write(i + " " + j + " T\n");
                } else {
                    writer.write(i + " " + j + " F\n");
                }
            }
            }
            writer.close();
            System.out.println("Successfully wrote to the file.");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
    
    public void load() {
        try(Scanner fin = new Scanner(new File(saveloc))){
            if(fin.hasNextLine()) {
                while (fin.hasNextLine()) {
                    String curr = fin.nextLine();
                    String[] arr = curr.split(" ");
                    int i = Integer.parseInt(arr[0]);
                    int j = Integer.parseInt(arr[1]);
                    if (j < 96 && i > 0 && j > 0) {
                    if (arr[2].equalsIgnoreCase("T")) {
                        bools[i][j] = true;   
                    } else {
                        bools[i][j] = false;   
                    }   
                    }
                }    
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shownPanel = new javax.swing.JPanel();
        photoFrame = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        shownPanel = panel;
        shownPanel.setPreferredSize(new java.awt.Dimension(1900, 900));

        photoFrame.setPreferredSize(new java.awt.Dimension(1900, 900));

        javax.swing.GroupLayout shownPanelLayout = new javax.swing.GroupLayout(shownPanel);
        shownPanel.setLayout(shownPanelLayout);
        shownPanelLayout.setHorizontalGroup(
            shownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        shownPanelLayout.setVerticalGroup(
            shownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(shownPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(shownPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel photoFrame;
    private javax.swing.JPanel shownPanel;
    // End of variables declaration//GEN-END:variables

/**/
    
    
    
    class myPanel2 extends JPanel {

        
        public myPanel2() {
            setVisible(true);
            
            
            this.addMouseListener(new MouseAdapter() { 
                public void mousePressed(MouseEvent me) { 
                    int xPress = me.getX();
                    int yPress = me.getY();
                    while (xPress % blockSize != 0) {
                        xPress--;
                    }
                    while (yPress % blockSize != 0 ) {
                        yPress--;
                    }
                    int i = xPress/blockSize;
                    int j = yPress/blockSize;
                    
                    bools[i][j] = !bools[i][j];
                    
                    System.out.println(".mousePressed()");
                    repaint();
                    save();
                    
                } 
            });
            
            this.addMouseMotionListener(new MouseMotionAdapter() {
                public void mouseDragged(MouseEvent e) {
                    int xPress = e.getX();
                    int yPress = e.getY();
                    while (xPress % blockSize != 0) {
                        xPress--;
                    }
                    while (yPress % blockSize != 0 ) {
                        yPress--;
                    }
                    int i = xPress/blockSize;
                    int j = yPress/blockSize;
                    
                    bools[i][j] = true;

                    repaint();
                    save();
                }
            });
    }
            
            
        
        public ArrayList<Point> expanders = new ArrayList<Point>();
        
        
        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);

            g.drawImage(image.imageVar, 0, 0, null);
            for (Rectangle[] s: spaces) {
                for (Rectangle r: s) {
                    g.drawRect(r.x, r.y, blockSize, blockSize);
                }
            }
            
            for (int i = 0; i < bools.length; i++) {
                for (int j = 0; j < bools[i].length; j++) {
                    if (bools[i][j]) {
                        g.setColor(Color.white);
                        g.fillRect(i * blockSize, j* blockSize, blockSize, blockSize);
                    }
                }
            }
            
            
            
        }
        

}
}
